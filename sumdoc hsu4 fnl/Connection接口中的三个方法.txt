JDBC提供了三个类，用于向数据库发送SQL语句。Connection接口中的三个方法可用于创建这些类的实例。下面列出这些类及其创建方法：

（1）Statement：由方法createStatement所创建。Statement对象用于发送简单的SQL语句。

（2）PreparedStatement：由方法prepareStatement所创建。 PreparedStatement对象用于发送带有一个或多个输入参数（IN参数）的SQL语句。PreparedStatement拥有一组方法，用于设置IN参数的值。执行语句时，这些IN参数将被送到数据库中。PreparedStatement的实例扩展了Statement，因此它们都包括了 Statement的方法。PreparedStatement对象有可能比Statement对象的效率更高，因为它已被预编译过并存放在那以供将来使用。

（3）CallableStatement：由方法prepareCall所创建。 CallableStatement对象用于执行SQL储存程序―一组可通过名称来调用（就象函数的调用那样）的SQL语句。 CallableStatement对象从PreparedStatement中继承了用于处理IN参数的方法，而且还增加了用于处理OUT参数和 INOUT参数的方法。

不过通常来说createStatement方法用于简单的SQL语句（不带参数）、prepareStatement方法用于带一个或多个IN参数的SQL语句或经常被执行的简单SQL语句，而prepareCall方法用于调用已储存过程。



2. 使用Statement对象执行语句

Statement接口提供了三种执行SQL语句的方法：executeQuery、executeUpdate和execute。使用哪一个方法由SQL语句所产生的内容决定。

方法executeQuery用于产生单个结果集的语句，例如SELECT语句。方法 executeUpdate用于执行INSERT、UPDATE或DELETE语句以及SQL DDL（数据定义语言）语句，例如CREATE TABLE和DROP TABLE。INSERT、UPDATE或DELETE语句的效果是修改表中零行或多行中的一列或多列。executeUpdate的返回值是一个整数，指示受影响的行数（即更新计数）。对于CREATE TABLE或DROP TABLE等不操作行的语句，executeUpdate的返回值总为零。

执行语句的所有方法都将关闭所调用的Statement对象的当前打开结果集（如果存在）。这意味着在重新执行Statement对象之前，需要完成对当前ResultSet对象的处理。应注意，继承了Statement接口中所有方法的 PreparedStatement接口都有自己的executeQuery、executeUpdate和execute方法。Statement对象本身不包含SQL语句，因而必须给Statement.execute方法提供SQL语句作为参数。PreparedStatement对象并不需要 SQL语句作为参数提供给这些方法，因为它们已经包含预编译SQL语句。

CallableStatement对象继承这些方法的PreparedStatement形式。对于这些方法的PreparedStatement或CallableStatement版本，使用查询参数将抛出SQLException。

. 使用方法execute

execute方法应该仅在语句能返回多个ResultSet对象、多个更新计数或 ResultSet对象与更新计数的组合时使用。当执行某个已存储过程或动态执行未知SQL字符串（即应用程序程序员在编译时未知）时，有可能出现多个结果的情况，尽管这种情况很少见。例如，用户可能执行一个已存储过程，并且该已存储过程可执行更新，然后执行选择，再进行更新，再进行选择，等等。通常使用已存储过程的人应知道它所返回的内容。

因为方法execute处理非常规情况，所以获取其结果需要一些特殊处理并不足为怪。例如，假定已知某个过程返回两个结果集，则在使用方法execute执行该过程后，必须调用方法getResultSet获得第一个结果集，然后调用适当的 getXXX方法获取其中的值。要获得第二个结果集，需要先调用getMoreResults方法，然后再调用getResultSet方法。如果已知某个过程返回两个更新计数，则首先调用方法getUpdateCount，然后调用getMoreResults，并再次调用 getUpdateCount。

对于不知道返回内容，则情况更为复杂。如果结果是ResultSet对象，则方法execute返回true；如果结果是Javaint，则返回false。如果返回int，则意味着结果是更新计数或执行的语句是DL命令。在调用方法execute之后要做的第一件事情是调用getResultSet或getUpdateCount。调用方法getResultSet可以获得两个或多个 ResultSet对象中第一个对象；或调用方法getUpdateCount可以获得两个或多个更新计数中第一个更新计数的内容。

当SQL语句的结果不是结果集时，则方法getResultSet将返回null。这可能意味着结果是一个更新计数或没有其它结果。在这种情况下，判断null真正含义的唯一方法是调用方法getUpdateCount，它将返回一个整数。这个整数为调用语句所影响的行数；如果为-1则表示结果是结果集或没有结果。如果方法getResultSet已返回null（表示结果不是ResultSet对象），则返回值-1表示没有其它结果。也就是说，当下列条件为真时表示没有结果（或没有其它结果）：

（（stmt.getResultSet（）==null）&&（stmt.getUpdateCount（）==-1））

如果已经调用方法getResultSet并处理了它返回的ResultSet对象，则有必要调用方法getMoreResults以确定是否有其它结果集或更新计数。如果getMoreResults返回true，则需要再次调用 getResultSet来检索下一个结果集。如上所述，如果getResultSet返回null，则需要调用getUpdateCount来检查 null是表示结果为更新计数还是表示没有其它结果。

当getMoreResults返回false时，它表示该SQL语句返回一个更新计数或没有其它结果。因此需要调用方法getUpdateCount来检查它是哪一种情况。在这种情况下，当下列条件为真时表示没有其它结果：

（（stmt.getMoreResults（）==false）&&（stmt.getUpdateCount（）==-1））

下面的代码演示了一种方法用来确认已访问调用方法execute所产生的全部结果集和更新计数：

stmt.execute（queryStringWithUnknownResults）；
while（true）{
introwCount=stmt.getUpdateCount（）；
if（rowCount＞0）{//它是更新计数
System.out.println（"Rows changed="+count）；
stmt.getMoreResults（）；
continue；
}
if（rowCount==0）{//DDL命令或0个更新
System.out.println（"No rows changed or statement was DDL command"）；
stmt.getMoreResults（）；
continue；
}
//执行到这里，证明有一个结果集
//或没有其它结果
ResultSet rs=stmt.getResultSet（）；
if（rs!=null）{
...//使用元数据获得关于结果集列的信息
while（rs.next（））{
...//处理结果
stmt.getMoreResults（）；
continue；
}
break；//没有其它结果





6. 可选结果集或多结果集

通常使用executeQuery（它返回单个ResultSet）或executeUpdate （它可用于任何数据库修改语句，并返回更新行数）可执行SQL语句。但有些情况下，应用程序在执行语句之前不知道该语句是否返回结果集。此外，有些已存储过程可能返回几个不同的结果集和/或更新计数。

为了适应这些情况，JDBC提供了一种机制，允许应用程序执行语句，然后处理由结果集和更新计数组成的任意集合。这种机制的原理是首先调用一个完全通用的execute方法，然后调用另外三个方法，getResultSet、 getUpdateCount和getMoreResults。这些方法允许应用程序一次一个地研究语句结果，并确定给定结果是ResultSet还是更新计数。

用户不必关闭ResultSet；当产生它的Statement关闭、重新执行或用于从多结果序列中获取下一个结果时，该ResultSet将被Statement自动关闭。
