<!--STATUS OK-->
  <meta http-equiv="Content-Type" content="text/html;charset=gb2312">
  <base href="http://hi.baidu.com/fengboy_7334/blog/item/4b5f2b31928f5aac5fdf0e0b.html">
  <style>
  body{margin:4px 0}
  #bd_sn_h{text-align:left;background-color:#ffffff;color:#000000}
  #bd_sn_h #p1{clear:both;font:14px Arial;margin:0 0 0 2px;padding:4px 0 0 0}
  #bd_sn_h a{color:#0000ff;text-decoration:underline}
  #bd_sn_h #p1 a{font-weight:bold}
  #baidu div{position:static}
  </style>

<table id="baidu" width="100%" cellpadding="0" cellspacing="0" border="0">
<tr><td>
  <div style="text-align:left;background-color:#ffffff;color:#000000">
    <div style="margin:6px 18px 0 10px;float:left"><a href="http://www.baidu.com"><img style="border:0px" alt="到百度首页" src="http://img.baidu.com/img/logo-kz.gif"></a></div>
    <div style="margin:27px 0 0 0;float:left">
      <form style="margin:0;padding:0" action="http://www.baidu.com/s"> 
      <input name="wd" size="35" style="font:16px Arial"> <input type="submit" value="百度一下">
      <input name="cl" type="hidden" value="3">
   	  </form>
    </div>
	<p style="clear:both;font:14px Arial;margin:0 0 0 2px;padding:4px 0 0 0;width:100%;text-align:left;background-color:#ffffff;color:#000000">您查询的关键词是：<B style='color:black;background-color:#ffff66'><a href=http://cache.baidu.com/c?m=9d78d513d9991aff0fadc82d4b41c0666843f1152ba4da0209d5843992735a311135beaf60624e0b89833a2516ae3a41f7aa6d65377470e4c09ecf5dddccc375709573632c49d61c59c41edbce4724c73dc004b4fa04bcfca76d8ea882d48b5403cb500e7a8aa48c095345cd3ba64033b4a4c95f15284afcb26e&p=b472c64ad78809ff57ee9f27554a&user=baidu#baidusnap0>hibernate</a>&nbsp;</B><B style='color:black;background-color:#A0FFFF'><a href=http://cache.baidu.com/c?m=9d78d513d9991aff0fadc82d4b41c0666843f1152ba4da0209d5843992735a311135beaf60624e0b89833a2516ae3a41f7aa6d65377470e4c09ecf5dddccc375709573632c49d61c59c41edbce4724c73dc004b4fa04bcfca76d8ea882d48b5403cb500e7a8aa48c095345cd3ba64033b4a4c95f15284afcb26e&p=b472c64ad78809ff57ee9f27554a&user=baidu#baidusnap1>通用</a>&nbsp;</B><B style='color:black;background-color:#99ff99'><a href=http://cache.baidu.com/c?m=9d78d513d9991aff0fadc82d4b41c0666843f1152ba4da0209d5843992735a311135beaf60624e0b89833a2516ae3a41f7aa6d65377470e4c09ecf5dddccc375709573632c49d61c59c41edbce4724c73dc004b4fa04bcfca76d8ea882d48b5403cb500e7a8aa48c095345cd3ba64033b4a4c95f15284afcb26e&p=b472c64ad78809ff57ee9f27554a&user=baidu#baidusnap2>dao</a>&nbsp;</B> 。如果打开速度慢，可以尝试<a style="color:#0000ff;text-decoration:underline;font-weight:bold" href="http://cache.baidu.com/c?m=9d78d513d9991aff0fadc82d4b41c0666843f1152ba4da0209d5843992735a311135beaf60624e0b89833a2516ae3a41f7aa6d65377470e4c09ecf5dddccc375709573632c49d61c59c41edbce4724c73dc004b4fa04bcfca76d8ea882d48b5403cb500e7a8aa48c095345cd3ba64033b4a4c95f15284afcb26e&p=b472c64ad78809ff57ee9f27554a&user=baidu&fast=y">快速版</a>；如果想保存快照，可以<a style="color:#0000ff;text-decoration:underline;font-weight:bold" onclick="window.open('http://cang.baidu.com/do/add?it='+encodeURIComponent(document.title)+'&amp;iu='+encodeURIComponent(location.href)+'&amp;fr=ps#nw=1','_s','scrollbars=no,width=600,height=450,right=75,top=20,status=no,resizable=yes'); return false;" href="http://cang.baidu.com/do/add" target="_blank">添加到搜藏</a>。</p>
	<p style="font:12px Arial;color:gray;margin:0 2px;width:100%text-align:left;background-color:#ffffff">(百度和网页<a style="color:#0000ff;text-decoration:underline" href="http://hi.baidu.com/fengboy_7334/blog/item/4b5f2b31928f5aac5fdf0e0b.html">http://hi.baidu.com/fengboy_7334/blog/item/4b5f2b31928f5aac5fdf0e0b.html</a>的作者无关，不对其内容负责。百度快照谨为网络故障时之索引，不代表被搜索网站的即时页面。)</p>
	<hr style="margin:8px 0;width:100%">
  </div>
</td></tr>
</table>
  <div style="position:relative">
  <!--STATUS OK-->
<html><head><meta http-equiv=content-type content="text/html; charset=gb2312"><title>一个通用的Hibernate DAO_自由飞翔</title>
<style>.error{color:#FF0000;font-size:12px}</style>






</head>
<body onLoad="formatonlinpic();">
<center>

<link rel="stylesheet" type="text/css" href="/fengboy%5F7334/css/item/3b2aa22ac75c10385343c11f.css">
<link rel="stylesheet" type="text/css" href="/space.css">



<style type="text/css">
#usrbar{padding:4px 10px 3px 0;font-size:12px;height:19px;line-height:19px;color:#000000;font-family:Arial;text-align:right;background:#ffffff;filter:alpha(opacity=65);-moz-opacity:0.5;width:auto !important;width:100%;letter-spacing:normal}
#usrbar a,#usrbar a:link,#usrbar a:visited{color:#0000CC;text-decoration:underline}
#ft{clear:both;height:20px;line-height:20px;color:#666666;font-size:12px;font-family:Arial;text-align:center}
#ft a,#ft a:link,#ft a:visited{color:#7777CC;text-decoration:underline}
#usrbar,#usrbar a,#usrbar a:link,#usrbar a:visited,#ft,#ft a,#ft a:link,#ft a:visited{letter-spacing:normal}
</style>





<div id="usrbar"><nobr> 


                <a href="http://www.baidu.com/" target="_blank">百度首页</a> | <a href="http://hi.baidu.com" target="_blank">百度空间</a>
        
        
</nobr></div>
<div id="main" align="left">
<!--[if IE]>

<![endif]-->
	<div id="header">
	<div class="lc"><div class="rc"></div></div>
<div class="tit"><a href="/fengboy%5F7334" class="titlink" title="fengboy_7334的空间 http://hi.baidu.com/fengboy_7334">自由飞翔</a></div>
<div class="desc">天空有多大?不知道,我想去证明</div>
<div id="tabline">&nbsp;</div>
	<div id="tab"><a href="/fengboy%5F7334">主页</a><a href="/fengboy%5F7334/blog" class="on">博客</a><a href="/fengboy%5F7334/album">相册</a><span>|</span><a href="/fengboy%5F7334/profile">个人档案</a>
	<span>|</span><a href="/fengboy%5F7334/friends">好友</a>
	



	</div>
</div>

<div class="stage">
<div class="stagepad">
<div style="width:100%">

	<table width="100%" border="0" cellspacing="0" cellpadding="0" class="modth">
	<tr><td class="modtl" width="7">&nbsp;</td>
	<td class="modtc" nowrap><div class="modhead"><span class="modtit">查看文章</span></div></td>
	<td class="modtc" nowrap align="right"></td>
	<td class="modtr" width="7">&nbsp;</td>
	</tr></table>

<div id="m_blog" class="modbox">
<div class="tit">一个<a name=baidusnap1></a><B style='color:black;background-color:#A0FFFF'>通用</B>的<a name=baidusnap0></a><B style='color:black;background-color:#ffff66'>Hibernate</B> <a name=baidusnap2></a><B style='color:black;background-color:#99ff99'>DAO</B></div>
<div class="date">2008年02月04日 星期一  14:14</div>
<table style="table-layout:fixed"><tr><td><div class="cnt"><p>经过one-to-one和one-to-many测试没有问题，看直接复制到任何需要<B style='color:black;background-color:#99ff99'>DAO</B>的工程中使用<br>
代码<br>
强烈建议在实际使用中加个接口</p>
<p>BaseDAO.JAVA</p>
<p>package com.lusm.HibernateSessionFactory;</p>
<p>import java.io.Serializable;<br>
import java.util.List;</p>
<p>import org.<B style='color:black;background-color:#ffff66'>hibernate</B>.Query;<br>
import org.<B style='color:black;background-color:#ffff66'>hibernate</B>.Session;</p>
<p>public class BaseDAO {<br>
&nbsp;&nbsp;&nbsp;  /** *//**<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * 添加实体<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @param obj，要添加的实体对象<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @throws Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;  */<br>
&nbsp;&nbsp;&nbsp;  public void add(Object obj) throws Exception{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Session session = null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session = HibernateSessionFactory.getSession();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.save(obj);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.beginTransaction().commit();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  if(session!=null){<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.close();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  } catch (RuntimeException e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.beginTransaction().rollback();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  if(session!=null){<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.close();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  throw e;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;  <br>
&nbsp;&nbsp;&nbsp;  /** *//**<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * 删除实体<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @param obj，要删除的实体<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @throws Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;  */<br>
&nbsp;&nbsp;&nbsp;  public void delete(Object obj) throws Exception{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Session session = null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //取得session对象<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session =HibernateSessionFactory.getSession();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //删除实体<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.delete(obj);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //提交事务<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.beginTransaction().commit();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  if(session!=null){<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.close();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  } catch (Exception e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.beginTransaction().rollback();//事务回滚<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  if(session!=null){<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.close();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  throw e;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  /** *//**<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * 更新实体<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @param obj，要更新的实体<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @throws Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;  */<br>
&nbsp;&nbsp;&nbsp;  public void update(Object obj) throws Exception{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Session session=null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //取得session对象<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session=HibernateSessionFactory.getSession();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //删除实体<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.update(obj);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //提交事务<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.beginTransaction().commit();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  if(session!=null){<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.close();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  } catch (Exception e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.beginTransaction().rollback();//事务回滚<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  if(session!=null){<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  session.close();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  throw e;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;  <br>
&nbsp;&nbsp;&nbsp;  /** *//**<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * 根据指定的hql进行查询，并返回查询结果<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @param hql，hql语句<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @return 查询结果<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @throws Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;  */<br>
&nbsp;&nbsp;&nbsp;  public List&lt;?&gt; findByHQL(String hql) throws Exception{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Query queryObject =HibernateSessionFactory.getSession().createQuery(hql);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  return queryObject.list();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  } catch (Exception e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  throw e;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;  /** *//**<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * 根据指定的实体类型和主键的值，查找实体对象<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @param cls，实体的类<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @param key，主键的值<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @return，查找的实体对象<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @throws Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;  */<br>
&nbsp;&nbsp;&nbsp;  public Object findById(String cls,Serializable key)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  throws Exception<br>
&nbsp;&nbsp;&nbsp;  {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Object instance = (Object) HibernateSessionFactory.getSession().get(cls, key);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  return instance;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  } catch (Exception e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  throw e;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <br>
&nbsp;&nbsp;&nbsp;  }<br>
}<br>
HibernateSessionFactory.java 我就不发了，每个工程里都有</p>
<p>值得注意到是：<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  写代码是必须考虑到效率，资源利用，第一，不要创建无谓的实例，第二，不要写没有必要的返回语句，第三，close是有目的的，不可以滥用，第四，必须考虑到哪一步出错的概率高，必须在下一步先做判断。</p>
<p>比如代码：<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  /** *//**<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * 添加实体<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @param obj，要添加的实体对象<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @throws Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;  */<br>
&nbsp;&nbsp;&nbsp;  public void add(Object obj) throws Exception{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Session ses=null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Transaction tx=null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //取得session对象<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  ses=HibernateSessionFactory.getSession();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //开始事务<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  tx=ses.beginTransaction();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //保存实体<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  ses.save(obj);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //提交事务<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  tx.commit();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  } catch (Exception e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  tx.rollback();//事务回滚<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  throw e;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }finally{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //关闭session<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  HibernateSessionFactory.closeSession();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>
&nbsp;&nbsp;&nbsp;  }<br>
使用one-to-many中执行删除时， 你可以会遇到这样的错误</p>
<p>Exception in thread &quot;main&quot; org.<B style='color:black;background-color:#ffff66'>hibernate</B>.TransientObjectException: the detached instance passed to delete() had a null identifier<br>
  .........或者<br>
Exception in thread &quot;main&quot; org.<B style='color:black;background-color:#ffff66'>hibernate</B>.TransientObjectException: the detached instance passed to delete() had a null identifier<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.event.def.DefaultDeleteEventListener.onDelete(DefaultDeleteEventListener.java:63)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.impl.SessionImpl.fireDelete(SessionImpl.java:761)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.impl.SessionImpl.delete(SessionImpl.java:739)<br>
&nbsp;&nbsp;&nbsp;  at com.lusm.HibernateSessionFactory.BaseDAO.delete(BaseDAO.java:44)<br>
&nbsp;&nbsp;&nbsp;  at com.lusm.main.Del.main(Del.java:19)或<br>
Exception in thread &quot;main&quot; org.<B style='color:black;background-color:#ffff66'>hibernate</B>.exception.ConstraintViolationException: Could not execute JDBC batch update<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.exception.SQLStateConverter.convert(SQLStateConverter.java:71)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:202)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.engine.ActionQueue.executeActions(ActionQueue.java:235)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.engine.ActionQueue.executeActions(ActionQueue.java:144)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:297)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.impl.SessionImpl.flush(SessionImpl.java:985)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.impl.SessionImpl.managedFlush(SessionImpl.java:333)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.transaction.JDBCTransaction.commit(JDBCTransaction.java:106)<br>
&nbsp;&nbsp;&nbsp;  at com.lusm.HibernateSessionFactory.BaseDAO.delete(BaseDAO.java:46)<br>
&nbsp;&nbsp;&nbsp;  at com.lusm.main.Del.main(Del.java:18)<br>
Caused by: java.sql.BatchUpdateException: Cannot delete or update a parent row: a foreign key constraint fails (`lusm/test1`, CONSTRAINT `test1_ibfk_1` FOREIGN KEY (`id`) REFERENCES `test` (`id`))<br>
&nbsp;&nbsp;&nbsp;  at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1669)<br>
&nbsp;&nbsp;&nbsp;  at com.mysql.jdbc.PreparedStatement.executeBatch(PreparedStatement.java:1085)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:58)<br>
&nbsp;&nbsp;&nbsp;  at org.<B style='color:black;background-color:#ffff66'>hibernate</B>.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:195)<br>
&nbsp;&nbsp;&nbsp;&nbsp;  9 more<br>
原因是你的xml配置和数据库创建有问题<br>
下面给出一个成功的例子<br>
many</p>
<p>xml config<br>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>
&lt;!DOCTYPE <B style='color:black;background-color:#ffff66'>hibernate</B>-mapping PUBLIC &quot;-//<B style='color:black;background-color:#ffff66'>Hibernate</B>/<B style='color:black;background-color:#ffff66'>Hibernate</B> Mapping DTD 3.0//EN&quot;<br>
&quot;<a href="http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">http://<B style='color:black;background-color:#ffff66'>hibernate</B>.sourceforge.net/<B style='color:black;background-color:#ffff66'>hibernate</B>-mapping-3.0.dtd</a>&quot;&gt;<br>
&lt;!-- <br>
&nbsp;&nbsp;&nbsp;  Mapping file autogenerated by MyEclipse Persistence Tools<br>
--&gt;<br>
&lt;<B style='color:black;background-color:#ffff66'>hibernate</B>-mapping&gt;<br>
&nbsp;&nbsp;&nbsp;  &lt;class name=&quot;com.lusm.test.Test1&quot; table=&quot;test1&quot; catalog=&quot;lusm&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;id name=&quot;sid&quot; type=&quot;java.lang.Integer&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;column name=&quot;sid&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;generator class=&quot;increment&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/id&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;many-to-one name=&quot;test&quot;  class=&quot;com.lusm.test.Test&quot; fetch=&quot;select&quot;  cascade=&quot;save-update&quot; &gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;column name=&quot;id&quot; not-null=&quot;true&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/many-to-one&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;property name=&quot;sname&quot; type=&quot;java.lang.String&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;column name=&quot;sname&quot; length=&quot;20&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/property&gt;<br>
&nbsp;&nbsp;&nbsp;  &lt;/class&gt;<br>
&lt;/<B style='color:black;background-color:#ffff66'>hibernate</B>-mapping&gt;<br>
code<br>
package com.lusm.test;</p>
<p>/** *//**<br>
 * Test1 generated by MyEclipse Persistence Tools<br>
 */</p>
<p>public class Test1 implements java.io.Serializable {</p>
<p>&nbsp;&nbsp;&nbsp;  // Fields</p>
<p>&nbsp;&nbsp;&nbsp;  private Integer sid;<br>
&nbsp;&nbsp;&nbsp;  private Test test;<br>
&nbsp;&nbsp;&nbsp;  private String sname;</p>
<p>&nbsp;&nbsp;&nbsp;  // Constructors</p>
<p>&nbsp;&nbsp;&nbsp;  /** *//** default constructor */<br>
&nbsp;&nbsp;&nbsp;  public Test1() {<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  /** *//** minimal constructor */<br>
&nbsp;&nbsp;&nbsp;  public Test1(Test test) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.test = test;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  /** *//** full constructor */<br>
&nbsp;&nbsp;&nbsp;  public Test1(Test test, String sname) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.test = test;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.sname = sname;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  // Property accessors</p>
<p>&nbsp;&nbsp;&nbsp;  public Integer getSid() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  return this.sid;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  public void setSid(Integer sid) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.sid = sid;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  public Test getTest() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  return this.test;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  public void setTest(Test test) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.test = test;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  public String getSname() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  return this.sname;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  public void setSname(String sname) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.sname = sname;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>}<br>
one</p>
<p>xml config<br>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br>
&lt;!DOCTYPE <B style='color:black;background-color:#ffff66'>hibernate</B>-mapping PUBLIC &quot;-//<B style='color:black;background-color:#ffff66'>Hibernate</B>/<B style='color:black;background-color:#ffff66'>Hibernate</B> Mapping DTD 3.0//EN&quot;<br>
&quot;<a href="http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">http://<B style='color:black;background-color:#ffff66'>hibernate</B>.sourceforge.net/<B style='color:black;background-color:#ffff66'>hibernate</B>-mapping-3.0.dtd</a>&quot;&gt;<br>
&lt;!-- <br>
&nbsp;&nbsp;&nbsp;  Mapping file autogenerated by MyEclipse Persistence Tools<br>
--&gt;<br>
&lt;<B style='color:black;background-color:#ffff66'>hibernate</B>-mapping&gt;<br>
&nbsp;&nbsp;&nbsp;  &lt;class name=&quot;com.lusm.test.Test&quot; table=&quot;test&quot; catalog=&quot;lusm&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;id name=&quot;id&quot; type=&quot;java.lang.Integer&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;column name=&quot;id&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;generator class=&quot;increment&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/id&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;property name=&quot;name&quot; type=&quot;java.lang.String&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;column name=&quot;name&quot; length=&quot;20&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/property&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;set name=&quot;test1s&quot; inverse=&quot;true&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;key&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;column name=&quot;id&quot; not-null=&quot;true&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/key&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;one-to-many class=&quot;com.lusm.test.Test1&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &lt;/set&gt;<br>
&nbsp;&nbsp;&nbsp;  &lt;/class&gt;<br>
&lt;/<B style='color:black;background-color:#ffff66'>hibernate</B>-mapping&gt;<br>
code<br>
package com.lusm.test;</p>
<p>import java.util.HashSet;<br>
import java.util.Set;</p>
<p>/** *//**<br>
 * Test generated by MyEclipse Persistence Tools<br>
 */</p>
<p>public class Test implements java.io.Serializable {</p>
<p>&nbsp;&nbsp;&nbsp;  // Fields</p>
<p>&nbsp;&nbsp;&nbsp;  private Integer id;<br>
&nbsp;&nbsp;&nbsp;  private String name;<br>
&nbsp;&nbsp;&nbsp;  private Set test1s = new HashSet(0);</p>
<p>&nbsp;&nbsp;&nbsp;  // Constructors</p>
<p>&nbsp;&nbsp;&nbsp;  /** *//** default constructor */<br>
&nbsp;&nbsp;&nbsp;  public Test() {<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  /** *//** full constructor */<br>
&nbsp;&nbsp;&nbsp;  public Test(String name, Set test1s) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.name = name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.test1s = test1s;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  // Property accessors</p>
<p>&nbsp;&nbsp;&nbsp;  public Integer getId() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  return this.id;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  public void setId(Integer id) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.id = id;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  public String getName() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  return this.name;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  public void setName(String name) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.name = name;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  public Set getTest1s() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  return this.test1s;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>&nbsp;&nbsp;&nbsp;  public void setTest1s(Set test1s) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  this.test1s = test1s;<br>
&nbsp;&nbsp;&nbsp;  }</p>
<p>}<br>
db sql<br>
create table `lusm`.`test1`(<br>
`sid` INT not null auto_increment,<br>
`id` INT not null,<br>
`sname` varchar(20),<br>
primary key (`sid`),<br>
index(sid),<br>
foreign key(id) references test(id)  ON DELETE CASCADE ON UPDATE CASCADE <br>
);<br>
&nbsp;&nbsp;&nbsp;  create table `lusm`.`test`(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  `id` INT not null auto_increment,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  `name` VARCHAR(20),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  primary key (`id`)<br>
&nbsp;&nbsp;&nbsp;  );<br>
下面给出 该示例的两个测试类</p>
<p>insert<br>
package com.lusm.main;</p>
<p>import com.lusm.HibernateSessionFactory.BaseDAO;<br>
import com.lusm.test.Test;<br>
import com.lusm.test.Test1;</p>
<p><br>
public class Main {</p>
<p>&nbsp;&nbsp;&nbsp;  /** *//**<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @param args<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @throws Exception <br>
&nbsp;&nbsp;&nbsp;&nbsp;  */<br>
&nbsp;&nbsp;&nbsp;  public static void main(String[] args) throws Exception {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Test test = new Test();<br>
  <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  test.setName(&quot;nihao&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  BaseDAO td = new BaseDAO();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  td.add(test);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Test1 t1 = new Test1(test);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Test1 t2 = new Test1(test);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Test1 t3 = new Test1(test);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  t1.setSid(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  t2.setSid(2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  t3.setSid(3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  t1.setSname(&quot;nihao&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  t2.setSname(&quot;mfafs&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  t3.setSname(&quot;acncs&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  BaseDAO td1 = new BaseDAO();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  td1.add(t1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  td1.add(t2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  td1.add(t3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <br>
&nbsp;&nbsp;&nbsp;  }<br>
}<br>
delete<br>
package com.lusm.main;</p>
<p>import com.lusm.HibernateSessionFactory.BaseDAO;<br>
import com.lusm.test.Test;</p>
<p>public class Del {</p>
<p>&nbsp;&nbsp;&nbsp;  /** *//**<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @param args<br>
&nbsp;&nbsp;&nbsp;&nbsp;  * @throws Exception <br>
&nbsp;&nbsp;&nbsp;&nbsp;  */<br>
&nbsp;&nbsp;&nbsp;  public static void main(String[] args) throws Exception {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Test test = new Test();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  test.setId(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  BaseDAO bd = new BaseDAO();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  bd.delete(test);<br>
&nbsp;&nbsp;&nbsp;  }<br>
}</p></div></td></tr></table>
<br>
<div class="opt">
<a href="/fengboy%5F7334/blog/category/Hibernate" title="查看该分类中所有文章">类别：<B style='color:black;background-color:#ffff66'>Hibernate</B></a>
 
	
	| <a title="将此文章添加到百度搜藏" href="http://cang.baidu.com/do/add" onClick="return addToFavor();" target="_blank">添加到搜藏</a>
	
	| 浏览(<span id="result"></span>)
	| <a href="#send">评论</a>&nbsp;(0)



</div>
<div class="line">&nbsp;</div>



    <style type="text/css">
/*<![CDATA[*/
#in_related_doc a { text-decoration:none; }
/*]]>*/
</style>
<div id="in_related_tmp"></div>

    






<div id="in_reader">
<div class="tit">最近读者：</div>







	</div>

<div class="line">&nbsp;</div>





<div id="in_comment">
<a name="comment"></a>
<div class="tit">网友评论：</div>






<div id="page"></div>

</div>


<div id="in_send">
<a name="send"></a>
<form name="form1" id="popFormSubmit" action="/fengboy%5F7334/commit" method="post" onSubmit="return checkcmtform()">
<input type="hidden" name="ct" value="8">
<input type="hidden" name="cm" value="1">
<input type="hidden" name="spBlogID" value="4b5f2b31928f5aac5fdf0e0b">

<div class="tit">发表评论：</div>
<table width="620" border="0" cellspacing="5" cellpadding="0">
<tr>

<td class="f14">姓　名：</td>
<td><input type="text" name="spBlogCmtor" id="spBlogCmtor" style="width:220px" onChange="checkname('spBlogCmtor')" maxlength="49" onfocus="hidErr(1);"	tabindex=1>


<div style="display:none" id="nmerror">*姓名最长为50字节</div></td>
</tr>

<tr id="1_err" style="display:none">
<td>&nbsp;</td>
<td><div class="error" id="1_err_con"></div></td>
</tr>

<tr>
<td class="f14">网址或邮箱：</td>
<td><input type="text" name="spBlogCmtURL" id="spBlogCmtURL" style="width:360px" maxlength="128" onChange="checkeandu('spBlogCmtURL')" onfocus="hidErr(2);" tabindex=2> (选填)</td>


</tr>

<tr id="2_err" style="display:none">
<td>&nbsp;</td>
<td><div class="error" id="2_err_con"></div></td>
</tr>

<tr>
<td valign="top" class="f14">内　容：</td>
<td><textarea name="spBlogCmtText" id="spBlogCmtText" style="width:520px;height:155px" onfocus="hidErr(3);" tabindex=3></textarea>

</td>
</tr>
<tr id="3_err" style="display:none">
<td>&nbsp;</td>
<td><div class="error" id="3_err_con"></div></td>
</tr>

<tr id="vercode">
<td valign="top" class="f14">验证码：</td>
<td valign="top"><input type="hidden" name="spVcode" value="FFABA6EC412723F0519F415A1146534A113B75EC03BCF614127347A31583A598F440A914751237BB3AA51014EECAFD66740FD2503A69DCF53CCDCC858E5D698A" />
<input type="text" id="spVerifyKey" name="spVerifyKey" size="6"  maxlength="4" autocomplete="off" tabindex=4>请输入下图中的四位验证码，字母不区分大小写。<br>

		
<a href="javascript:newverifypic();" title="看不清左边的字符" >看不清?</a>
</td>
</tr>


<tr>
<td valign="top"class="f14">&nbsp;</td>
<td valign="top" class="f14"><input id="btn_ok" name="btn_ok" type="submit" value="发表评论" tabindex=5></td>
</tr>
</table>
</form>
</div>




<br>
</div>

<table width="100%" border="0" cellspacing="0" cellpadding="0" height="8">
<tr><td class="modbl" width="7">&nbsp;</td>
<td class="modbc">&nbsp;</td>
<td class="modbr" width="7">&nbsp;</td>
</tr></table>

</div>
</div>

</div>

</div>


<br><center><div id="ft">&copy;2008 Baidu</div></center>


</center>


<img src="http://c.baidu.com/c.gif?t=6&p=3" style="display:none;"/>
</body></html>

